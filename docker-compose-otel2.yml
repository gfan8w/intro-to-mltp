name: grafana-intro-to-mltp-otel
volumes:
  grafana:
  postgres:
networks:
  otel2:

services:
  # The opentelemetry-collector batches and processes traces sent to it.
  opentelemetry-collector:
    image: otel/opentelemetry-collector-contrib
    ports:
      - "12347:12345"
      - "12348:12348"
      - "6832:6832"
      - "55679:55679"
      - "4317:4317"
      - "4318:4318"
    volumes:
      - ./otel/otel.yml:/etc/otel-collector-config.yml
    command: ["--config=/etc/otel-collector-config.yml"]
    extra_hosts: ['host.docker.internal:host-gateway']
    networks:
      - otel2

  # The Grafana dashboarding server.
  grafana:
    image: grafana/grafana:12.0.2
    volumes:
      - "./grafana/definitions:/var/lib/grafana/dashboards"
      - "./grafana/provisioning:/etc/grafana/provisioning"
    ports:
      - "3000:3000"
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=flameGraph traceqlSearch correlations traceQLStreaming metricsSummary traceqlEditor traceToMetrics traceToProfiles datatrails
      - GF_INSTALL_PLUGINS=grafana-lokiexplore-app,grafana-exploretraces-app,grafana-pyroscope-app
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
#      - HTTP_PROXY=http://host.docker.internal:7890  # Example for macOS
#      - HTTPS_PROXY=http://host.docker.internal:7890 # Example for macOS
#      - NO_PROXY=localhost,127.0.0.1
    networks:
      - otel2

  # The Tempo service stores traces send to it by Grafana opentelemetry-collector, and takes
  # queries from Grafana to visualise those traces.
  tempo:
    image: grafana/tempo:2.8.1
    ports:
      - "3200:3200"
      - "55680:55680"
      - "55681:55681"
      - "14250:14250"
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - "./tempo/tempo.yaml:/etc/tempo.yaml"
    networks:
      - otel2


  # The Loki service stores logs sent to it, and takes queries from Grafana
  # to visualise those logs.
  loki:
    image: grafana/loki:3.5.1
    command: ["--pattern-ingester.enabled=true", "-config.file=/etc/loki/loki.yaml"]
    ports:
      - "3100:3100"
    volumes:
      - "./loki/loki.yaml:/etc/loki/loki.yaml"
    networks:
      - otel2


  mimir:
    image: grafana/mimir:2.16.0
    command: ["-ingester.native-histograms-ingestion-enabled=true", "-config.file=/etc/mimir.yaml"]
    ports:
      - "9009:9009"
    volumes:
      - "./mimir/mimir.yaml:/etc/mimir.yaml"
    networks:
      - otel2


#  pyroscope:
#    image: grafana/pyroscope:1.13.5
#    ports:
#      - "4040:4040"
#    command: ["server"]
#
#  k6:
#    image: grafana/k6:0.58.0
#    volumes:
#      - "./k6:/scripts"
#    environment:
#      - K6_PROMETHEUS_RW_SERVER_URL=http://mimir:9009/api/v1/push
#      - K6_DURATION=3600s
#      - K6_VUS=4
#      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
#    restart: always
#    command: ["run", "-o", "experimental-prometheus-rw", "/scripts/mythical-loadtest.js"]
#
#  beyla-requester:
#    image: grafana/beyla:2.1.0
#    # Beyla requires to be run in the same process namespace as the process it's watching.
#    # In Docker, we can do this by joining the namespace for the watched process with the Beyla
#    # container watching it by using a specific `pid` label.
#    pid: "service:mythical-requester"
#    # Beyla requires the several system capabilities to run, to add hooks to the underlying kernel.
#    # Note that you should *always* be aware of the security implications of adding capabilities
#    # before you do so.
#    cap_add:
#      - SYS_ADMIN
#      - SYS_RESOURCE
#      - NET_RAW
#      - DAC_READ_SEARCH
#      - SYS_PTRACE
#      - PERFMON
#      - BPF
#      - CHECKPOINT_RESTORE
#    # If using the above capability fails to instrument your service, remove it and uncomment the
#    # line below. Beware that this will allow Beyla to run with full privileges, which may be
#    # undesirable.
#    #privileged: true
#    command:
#      - /beyla
#      - --config=/configs/config.yaml
#    volumes:
#      - ./beyla/:/configs
#    # See the full list of configuration options at
#    # https://grafana.com/docs/grafana-cloud/monitor-applications/beyla/configure/options/ for more details on the
#    # options set below.
#    environment:
#      BEYLA_OPEN_PORT: "4001"                                   # Instrument any service listening on port 4001.
#      BEYLA_SERVICE_NAMESPACE: "mythical"                       # The namespace for the service.
#      BEYLA_PROMETHEUS_PORT: "9090"                             # The port to expose Prometheus metrics on.
#      #BEYLA_BPF_TRACK_REQUEST_HEADERS: "true"
#      OTEL_SERVICE_NAME: "beyla-mythical-requester"             # The service name to use for OpenTelemetry traces.
#      OTEL_EXPORTER_OTLP_TRACES_INSECURE: "true"                # Whether to use an insecure connection to Grafana Agent.
#      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"                       # The protocol to use to send traces to Grafana Agent.
#      # The endpoint to send traces to.
#      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://opentelemetry-collector:4317"
#    # The `depends_on` block below ensures that the mythical-requester service is started before Beyla.
#    depends_on:
#      mythical-requester:
#        condition: service_started
#
#  beyla-server:
#    image: grafana/beyla:2.1.0
#    # Beyla requires to be run in the same process namespace as the process it's watching.
#    # In Docker, we can do this by joining the namespace for the watched process with the Beyla
#    # container watching it by using a specific `pid` label.
#    pid: "service:mythical-server"
#    # Beyla requires the several system capabilities to run, to add hooks to the underlying kernel.
#    # Note that you should *always* be aware of the security implications of adding capabilities
#    # before you do so.
#    cap_add:
#      - SYS_ADMIN
#      - SYS_RESOURCE
#      - NET_RAW
#      - DAC_READ_SEARCH
#      - SYS_PTRACE
#      - PERFMON
#      - BPF
#      - CHECKPOINT_RESTORE
#    # If using the above capability fails to instrument your service, remove it and uncomment the
#    # line below. Beware that this will allow Beyla to run with full privileges, which may be
#    # undesirable.
#    #privileged: true
#    command:
#      - /beyla
#      - --config=/configs/config.yaml
#    volumes:
#      - ./beyla/:/configs
#    # See the full list of configuration options at
#    # https://grafana.com/docs/grafana-cloud/monitor-applications/beyla/configure/options/ for more details on the
#    # options set below.
#    environment:
#      BEYLA_OPEN_PORT: "4000"                                   # Instrument any service listening on port 4000.
#      BEYLA_SERVICE_NAMESPACE: "mythical"                       # The namespace for the service.
#      BEYLA_PROMETHEUS_PORT: "9090"                             # The port to expose Prometheus metrics on.
#      #BEYLA_BPF_TRACK_REQUEST_HEADERS: "true"
#      OTEL_SERVICE_NAME: "beyla-mythical-server"                # The service name to use for OpenTelemetry traces.
#      OTEL_EXPORTER_OTLP_TRACES_INSECURE: "true"                # Whether to use an insecure connection to Grafana Agent.
#      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"                       # The protocol to use to send traces to Grafana Agent.
#      # The endpoint to send traces to.
#      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://opentelemetry-collector:4317"
#    # The `depends_on` block below ensures that the mythical-server service is started before Beyla.
#    depends_on:
#      mythical-server:
#        condition: service_started
#
#  beyla-recorder:
#    image: grafana/beyla:2.1.0
#    # Beyla requires to be run in the same process namespace as the process it's watching.
#    # In Docker, we can do this by joining the namespace for the watched process with the Beyla
#    # container watching it by using a specific `pid` label.
#    pid: "service:mythical-recorder"
#    # Beyla requires the several system capabilities to run, to add hooks to the underlying kernel.
#    # Note that you should *always* be aware of the security implications of adding capabilities
#    # before you do so.
#    cap_add:
#      - SYS_ADMIN
#      - SYS_RESOURCE
#      - NET_RAW
#      - DAC_READ_SEARCH
#      - SYS_PTRACE
#      - PERFMON
#      - BPF
#      - CHECKPOINT_RESTORE
#    # If using the above capability fails to instrument your service, remove it and uncomment the
#    # line below. Beware that this will allow Beyla to run with full privileges, which may be
#    # undesirable.
#    #privileged: true
#    command:
#      - /beyla
#      - --config=/configs/config.yaml
#    volumes:
#      - ./beyla/:/configs
#    # See the full list of configuration options at
#    # https://grafana.com/docs/grafana-cloud/monitor-applications/beyla/configure/options/ for more details on the
#    # options set below.
#    environment:
#      BEYLA_OPEN_PORT: "4002"                                   # Instrument any service listening on port 4002.
#      BEYLA_SERVICE_NAMESPACE: "mythical"                       # The namespace for the service.
#      BEYLA_PROMETHEUS_PORT: "9090"                             # The port to expose Prometheus metrics on.
#      #BEYLA_BPF_TRACK_REQUEST_HEADERS: "true"
#      OTEL_SERVICE_NAME: "beyla-mythical-recorder"              # The service name to use for OpenTelemetry traces.
#      OTEL_EXPORTER_OTLP_TRACES_INSECURE: "true"                # Whether to use an insecure connection to Grafana Agent.
#      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"                       # The protocol to use to send traces to Grafana Agent.
#      # The endpoint to send traces to.
#      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://opentelemetry-collector:4317"
#    # The `depends_on` block below ensures that the mythical-recorder service is started before Beyla.
#    depends_on:
#      mythical-recorder:
#        condition: service_started


